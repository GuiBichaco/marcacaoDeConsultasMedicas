/**
 * DOCUMENTA√á√ÉO DO C√ìDIGO
 * =======================
 *
 * * Arquivo: `NotificationsScreen.tsx`
 * * Descri√ß√£o: Este arquivo define o componente `NotificationsScreen`, que √© a tela respons√°vel
 * por exibir uma lista de notifica√ß√µes para o usu√°rio logado. A tela permite que o usu√°rio
 * visualize, marque como lida (individualmente ou todas de uma vez) e exclua notifica√ß√µes.
 *
 * * Funcionalidades Principais:
 * 1. Busca e exibe notifica√ß√µes espec√≠ficas do usu√°rio a partir de um `notificationService`.
 * 2. Atualiza a lista de notifica√ß√µes automaticamente sempre que a tela ganha foco.
 * 3. Permite marcar notifica√ß√µes como lidas individualmente (com um toque) ou em massa.
 * 4. Permite excluir notifica√ß√µes (com um toque longo e um di√°logo de confirma√ß√£o).
 * 5. Exibe um contador de notifica√ß√µes n√£o lidas e diferencia visualmente as notifica√ß√µes lidas das n√£o lidas.
 * 6. Apresenta √≠cones diferentes para cada tipo de notifica√ß√£o.
 */

// ========================================================================
// 1. IMPORTA√á√ïES DE DEPEND√äNCIAS, HOOKS E COMPONENTES
// ========================================================================

// Importa hooks e tipos essenciais do React e React Native.
import React, { useState } from 'react';
import styled from 'styled-components/native';
import { ScrollView, ViewStyle, Alert } from 'react-native';

// Importa componentes de UI da biblioteca 'react-native-elements'.
import { Button, ListItem, Badge } from 'react-native-elements';

// Importa hooks customizados e de navega√ß√£o.
import { useAuth } from '../contexts/AuthContext';
import { useNavigation, useFocusEffect } from '@react-navigation/native';

// Importa tipos de navega√ß√£o.
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '../types/navigation';

// Importa o tema, componentes, servi√ßos e tipos.
import theme from '../styles/theme';
import Header from '../components/Header';
import { notificationService, Notification } from '../services/notifications';

// ========================================================================
// 2. DEFINI√á√ïES DE TIPOS
// ========================================================================

// Tipagem para as props de navega√ß√£o espec√≠ficas desta tela.
type NotificationsScreenProps = {
  navigation: NativeStackNavigationProp<RootStackParamList, 'Notifications'>;
};

// ========================================================================
// 3. DEFINI√á√ÉO DO COMPONENTE DE TELA
// ========================================================================
const NotificationsScreen: React.FC = () => {
  // ----------------------------------------------------------------------
  // 3.1. HOOKS E ESTADOS
  // ----------------------------------------------------------------------

  const { user } = useAuth();
  const navigation = useNavigation<NotificationsScreenProps['navigation']>();
  
  // Estado para armazenar a lista de notifica√ß√µes do usu√°rio.
  const [notifications, setNotifications] = useState<Notification[]>([]);
  // Estado para controlar a exibi√ß√£o do indicador de carregamento.
  const [loading, setLoading] = useState(true);

  // ----------------------------------------------------------------------
  // 3.2. FUN√á√ïES DE DADOS E A√á√ïES
  // ----------------------------------------------------------------------

  // Fun√ß√£o ass√≠ncrona para carregar as notifica√ß√µes do usu√°rio a partir do servi√ßo.
  const loadNotifications = async () => {
    if (!user?.id) return; // Garante que h√° um usu√°rio logado.
    
    try {
      const userNotifications = await notificationService.getNotifications(user.id);
      setNotifications(userNotifications); // Atualiza o estado com as notifica√ß√µes recebidas.
    } catch (error) {
      console.error('Erro ao carregar notifica√ß√µes:', error);
    } finally {
      setLoading(false); // Desativa o indicador de carregamento.
    }
  };

  // Hook `useFocusEffect` para recarregar as notifica√ß√µes sempre que a tela ganhar foco.
  useFocusEffect(
    React.useCallback(() => {
      loadNotifications();
    }, [user?.id])
  );

  // Fun√ß√£o para marcar uma notifica√ß√£o espec√≠fica como lida.
  const handleMarkAsRead = async (notificationId: string) => {
    try {
      await notificationService.markAsRead(notificationId);
      loadNotifications(); // Recarrega a lista para refletir a mudan√ßa.
    } catch (error) {
      console.error('Erro ao marcar como lida:', error);
    }
  };

  // Fun√ß√£o para marcar todas as notifica√ß√µes do usu√°rio como lidas.
  const handleMarkAllAsRead = async () => {
    if (!user?.id) return;
    
    try {
      await notificationService.markAllAsRead(user.id);
      loadNotifications(); // Recarrega a lista.
    } catch (error) {
      console.error('Erro ao marcar todas como lidas:', error);
    }
  };

  // Fun√ß√£o para excluir uma notifica√ß√£o, com um di√°logo de confirma√ß√£o.
  const handleDeleteNotification = async (notificationId: string) => {
    Alert.alert(
      'Excluir Notifica√ß√£o',
      'Tem certeza que deseja excluir esta notifica√ß√£o?',
      [
        { text: 'Cancelar', style: 'cancel' }, // Bot√£o de cancelar.
        {
          text: 'Excluir',
          style: 'destructive', // Estilo destrutivo (vermelho no iOS).
          onPress: async () => { // Fun√ß√£o executada se o usu√°rio confirmar.
            try {
              await notificationService.deleteNotification(notificationId);
              loadNotifications(); // Recarrega a lista.
            } catch (error) {
              console.error('Erro ao excluir notifica√ß√£o:', error);
            }
          },
        },
      ]
    );
  };

  // ----------------------------------------------------------------------
  // 3.3. FUN√á√ïES AUXILIARES (HELPERS) E VALORES COMPUTADOS
  // ----------------------------------------------------------------------

  // Fun√ß√£o auxiliar para retornar um √≠cone (emoji) com base no tipo da notifica√ß√£o.
  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'appointment_confirmed': return '‚úÖ';
      case 'appointment_cancelled': return '‚ùå';
      case 'appointment_reminder': return '‚è∞';
      default: return 'üì©';
    }
  };

  // Fun√ß√£o auxiliar para formatar a data e hora para o padr√£o brasileiro.
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('pt-BR', {
      day: '2-digit', month: '2-digit', year: 'numeric',
      hour: '2-digit', minute: '2-digit',
    });
  };

  // Valor computado: calcula o n√∫mero de notifica√ß√µes n√£o lidas diretamente do estado.
  const unreadCount = notifications.filter(n => !n.read).length;

  // ----------------------------------------------------------------------
  // 3.4. RENDERIZA√á√ÉO DA INTERFACE (JSX)
  // ----------------------------------------------------------------------
  return (
    <Container>
      <Header />
      <ScrollView contentContainerStyle={styles.scrollContent}>
        {/* T√≠tulo da tela com um contador de notifica√ß√µes n√£o lidas. */}
        <TitleContainer>
          <Title>Notifica√ß√µes</Title>
          {unreadCount > 0 && (
            <Badge value={unreadCount} status="error" containerStyle={styles.badge} />
          )}
        </TitleContainer>

        {/* Bot√£o para marcar todas como lidas, vis√≠vel apenas se houver notifica√ß√µes n√£o lidas. */}
        {unreadCount > 0 && (
          <Button
            title="Marcar todas como lidas"
            onPress={handleMarkAllAsRead}
            containerStyle={styles.markAllButton as ViewStyle}
            buttonStyle={styles.markAllButtonStyle}
          />
        )}

        {/* Bot√£o para voltar √† tela anterior. */}
        <Button
          title="Voltar"
          onPress={() => navigation.goBack()}
          containerStyle={styles.button as ViewStyle}
          buttonStyle={styles.buttonStyle}
        />

        {/* L√≥gica de renderiza√ß√£o condicional para a lista de notifica√ß√µes. */}
        {loading ? (
          <LoadingText>Carregando notifica√ß√µes...</LoadingText>
        ) : notifications.length === 0 ? (
          <EmptyContainer>
            <EmptyText>Nenhuma notifica√ß√£o encontrada</EmptyText>
          </EmptyContainer>
        ) : (
          // Mapeia a lista de notifica√ß√µes para renderizar um card para cada uma.
          notifications.map((notification) => (
            // Componente: NotificationCard (Card que exibe a notifica√ß√£o)
            <NotificationCard key={notification.id} isRead={notification.read}>
              <ListItem
                // Um toque curto em uma notifica√ß√£o n√£o lida a marca como lida.
                onPress={() => !notification.read && handleMarkAsRead(notification.id)}
                // Um toque longo abre o di√°logo para excluir a notifica√ß√£o.
                onLongPress={() => handleDeleteNotification(notification.id)}
              >
                <NotificationIcon>{getNotificationIcon(notification.type)}</NotificationIcon>
                <ListItem.Content>
                  <NotificationHeader>
                    <ListItem.Title style={styles.title}>{notification.title}</ListItem.Title>
                    {/* Exibe um ponto vermelho se a notifica√ß√£o n√£o foi lida. */}
                    {!notification.read && <UnreadDot />}
                  </NotificationHeader>
                  <ListItem.Subtitle style={styles.message}>{notification.message}</ListItem.Subtitle>
                  <DateText>{formatDate(notification.createdAt)}</DateText>
                </ListItem.Content>
              </ListItem>
            </NotificationCard>
          ))
        )}
      </ScrollView>
    </Container>
  );
};

// ========================================================================
// 4. ESTILIZA√á√ÉO (STYLES E STYLED COMPONENTS)
// ========================================================================

const styles = {
  scrollContent: { padding: 20, },
  badge: { marginLeft: 8, },
  markAllButton: { marginBottom: 15, width: '100%', },
  markAllButtonStyle: { backgroundColor: theme.colors.success, paddingVertical: 10, },
  button: { marginBottom: 20, width: '100%', },
  buttonStyle: { backgroundColor: theme.colors.primary, paddingVertical: 12, },
  title: { fontSize: 16, fontWeight: 'bold', color: theme.colors.text, },
  message: { fontSize: 14, color: theme.colors.text, marginTop: 4, lineHeight: 20, },
};

// --- Styled Components ---

const Container = styled.View`
  flex: 1;
  background-color: ${theme.colors.background};
`;

const TitleContainer = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;
`;

const Title = styled.Text`
  font-size: 24px;
  font-weight: bold;
  color: ${theme.colors.text};
  text-align: center;
`;

const LoadingText = styled.Text`
  text-align: center;
  color: ${theme.colors.text};
  font-size: 16px;
  margin-top: 20px;
`;

const EmptyContainer = styled.View`
  align-items: center;
  margin-top: 40px;
`;

const EmptyText = styled.Text`
  text-align: center;
  color: ${theme.colors.text};
  font-size: 16px;
  opacity: 0.7;
`;

// Card de notifica√ß√£o com estilo din√¢mico (cor de fundo e borda) baseado no estado `isRead`.
const NotificationCard = styled.View<{ isRead: boolean }>`
  background-color: ${(props) => props.isRead ? theme.colors.white : theme.colors.primary + '10'};
  border-radius: 8px;
  margin-bottom: 8px;
  border-width: 1px;
  border-color: ${(props) => props.isRead ? theme.colors.border : theme.colors.primary + '30'};
`;

const NotificationIcon = styled.Text`
  font-size: 20px;
  margin-right: 8px;
`;

// Cabe√ßalho da notifica√ß√£o para alinhar o t√≠tulo e o ponto de "n√£o lido".
const NotificationHeader = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  width: 100%;
`;

// Ponto vermelho para indicar uma notifica√ß√£o n√£o lida.
const UnreadDot = styled.View`
  width: 8px;
  height: 8px;
  border-radius: 4px;
  background-color: ${theme.colors.error};
  margin-left: 8px;
`;

// Texto para a data da notifica√ß√£o.
const DateText = styled.Text`
  font-size: 12px;
  color: ${theme.colors.text};
  opacity: 0.6;
  margin-top: 4px;
`;

export default NotificationsScreen;