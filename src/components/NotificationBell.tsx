/**
 * DOCUMENTA√á√ÉO DO C√ìDIGO
 * * Este arquivo define o componente `NotificationBell`.
 * √â um √≠cone de sino clic√°vel que exibe um contador de notifica√ß√µes n√£o lidas.
 * O componente busca periodicamente o n√∫mero de notifica√ß√µes novas, atualiza
 * o contador quando a tela ganha foco e navega para a tela de notifica√ß√µes
 * quando √© pressionado.
 */

// ========================================================================
// 1. IMPORTA√á√ïES DE DEPEND√äNCIAS
// ========================================================================

// Importa hooks essenciais do React: 'useState' para estado e 'useEffect' para efeitos colaterais.
import React, { useState, useEffect } from 'react';

// Importa a biblioteca 'styled-components' para React Native para criar componentes estilizados.
import styled from 'styled-components/native';

// Importa o componente 'TouchableOpacity' do React Native para criar uma √°rea toc√°vel com feedback visual.
import { TouchableOpacity } from 'react-native';

// Importa o componente 'Badge' da biblioteca 'react-native-elements' para exibir o contador.
import { Badge } from 'react-native-elements';

// Importa o hook 'useAuth' para acessar as informa√ß√µes do usu√°rio logado.
import { useAuth } from '../contexts/AuthContext';

// Importa o hook 'useNavigation' da biblioteca React Navigation para controlar a navega√ß√£o entre telas.
import { useNavigation } from '@react-navigation/native';

// Importa o 'notificationService', um m√≥dulo de servi√ßo respons√°vel pela l√≥gica de notifica√ß√µes (ex: chamadas de API).
import { notificationService } from '../services/notifications';

// Importa o objeto de tema (cores, fontes, etc.) para manter a consist√™ncia visual.
import theme from '../styles/theme';

// ========================================================================
// 2. DEFINI√á√ÉO DO COMPONENTE
// ========================================================================

// Declara√ß√£o do componente funcional 'NotificationBell'. Ele n√£o recebe props.
const NotificationBell: React.FC = () => {
  // ----------------------------------------------------------------------
  // 2.1. HOOKS E ESTADO DO COMPONENTE
  // ----------------------------------------------------------------------

  // Obt√©m o objeto 'user' do contexto de autentica√ß√£o.
  const { user } = useAuth();
  // Obt√©m o objeto 'navigation' para poder navegar para outras telas.
  const navigation = useNavigation();
  // Cria um estado 'unreadCount' para armazenar o n√∫mero de notifica√ß√µes n√£o lidas. Inicia com 0.
  const [unreadCount, setUnreadCount] = useState(0);

  // ----------------------------------------------------------------------
  // 2.2. FUN√á√ïES E EFEITOS (LIFECYCLE)
  // ----------------------------------------------------------------------

  // Fun√ß√£o ass√≠ncrona para carregar o n√∫mero de notifica√ß√µes n√£o lidas a partir do servi√ßo.
  const loadUnreadCount = async () => {
    // Se n√£o houver um ID de usu√°rio, interrompe a execu√ß√£o.
    if (!user?.id) return;
    
    try {
      // Chama o servi√ßo para obter a contagem de notifica√ß√µes n√£o lidas para o usu√°rio atual.
      const count = await notificationService.getUnreadCount(user.id);
      // Atualiza o estado com o valor recebido.
      setUnreadCount(count);
    } catch (error) {
      // Exibe um erro no console caso a busca falhe.
      console.error('Erro ao carregar contador de notifica√ß√µes:', error);
    }
  };

  // Primeiro useEffect: Lida com o carregamento inicial e a atualiza√ß√£o peri√≥dica (polling).
  useEffect(() => {
    // Carrega a contagem assim que o componente √© montado.
    loadUnreadCount();
    
    // Configura um intervalo (setInterval) para chamar a fun√ß√£o 'loadUnreadCount' a cada 30 segundos (30000 ms).
    const interval = setInterval(loadUnreadCount, 30000);
    
    // Fun√ß√£o de limpeza: ser√° executada quando o componente for desmontado.
    // Isso √© crucial para evitar vazamentos de mem√≥ria (memory leaks).
    return () => clearInterval(interval);
  }, [user?.id]); // O efeito ser√° re-executado se o ID do usu√°rio mudar.

  // Segundo useEffect: Lida com a atualiza√ß√£o quando a tela ganha foco.
  useEffect(() => {
    // Adiciona um "ouvinte" (listener) ao evento 'focus' da navega√ß√£o.
    // Toda vez que a tela que cont√©m este componente voltar a ser o foco, a fun√ß√£o 'loadUnreadCount' ser√° chamada.
    const unsubscribe = navigation.addListener('focus', loadUnreadCount);
    
    // Fun√ß√£o de limpeza: remove o "ouvinte" quando o componente √© desmontado para evitar memory leaks.
    return unsubscribe;
  }, [navigation, user?.id]); // O efeito depende dos objetos 'navigation' e 'user.id'.

  // Fun√ß√£o para lidar com o clique no sino.
  const handlePress = () => {
    // Navega para a tela chamada 'Notifications'.
    // O 'as never' √© um truque de TypeScript para evitar erros de tipagem em algumas configura√ß√µes de navega√ß√£o.
    navigation.navigate('Notifications' as never);
  };

  // ----------------------------------------------------------------------
  // 2.3. RENDERIZA√á√ÉO DA INTERFACE (JSX)
  // ----------------------------------------------------------------------
  return (
    // Componente: TouchableOpacity (√Årea Clic√°vel)
    // Envolve o √≠cone, tornando toda a √°rea sens√≠vel ao toque.
    <TouchableOpacity onPress={handlePress}>
      {/* Componente: BellContainer (Cont√™iner do Sino) */}
      {/* Posiciona o sino e serve de refer√™ncia para o posicionamento absoluto do contador (Badge). */}
      <BellContainer>
        {/* Componente: BellIcon (√çcone do Sino) */}
        {/* Representa o √≠cone do sino, que aqui √© um emoji de texto. */}
        <BellIcon>üîî</BellIcon>
        {/* Renderiza√ß√£o Condicional: O contador (Badge) s√≥ √© exibido se houver mais de 0 notifica√ß√µes n√£o lidas. */}
        {unreadCount > 0 && (
          // Componente: Badge (Contador de Notifica√ß√µes) da biblioteca react-native-elements.
          // Representa a bolinha vermelha com o n√∫mero.
          <Badge
            // O valor exibido √© '99+' se a contagem for maior que 99, sen√£o, mostra o n√∫mero exato.
            value={unreadCount > 99 ? '99+' : unreadCount.toString()}
            status="error" // Define a cor do badge como vermelha (padr√£o de erro/alerta).
            containerStyle={styles.badge} // Aplica estilos para o posicionamento.
            textStyle={styles.badgeText} // Aplica estilos para o texto dentro do badge.
          />
        )}
      </BellContainer>
    </TouchableOpacity>
  );
};

// ========================================================================
// 3. ESTILIZA√á√ÉO
// ========================================================================

// Objeto de estilos para o componente Badge.
const styles = {
  // Estilo do cont√™iner do Badge.
  badge: {
    // 'position: 'absolute'' permite posicionar o badge em rela√ß√£o ao seu pai mais pr√≥ximo que tenha 'position: 'relative''.
    position: 'absolute' as const, // 'as const' √© para o TypeScript entender o valor literal.
    top: -8, // Move o badge 8 pixels para cima da sua posi√ß√£o original.
    right: -8, // Move o badge 8 pixels para a esquerda da sua posi√ß√£o original.
  },
  // Estilo do texto dentro do Badge.
  badgeText: {
    fontSize: 10, // Define um tamanho de fonte pequeno para o contador.
  },
};

// Cria um <View> que serve como cont√™iner para o sino, com posicionamento relativo para o badge.
const BellContainer = styled.View`
  position: relative; /* Essencial para que o 'position: absolute' do badge funcione corretamente. */
  padding: 8px;
`;

// Cria um <Text> para o √≠cone do sino, definindo seu tamanho e cor.
const BellIcon = styled.Text`
  font-size: 24px;
  color: ${theme.colors.white};
`;

// ========================================================================
// 4. EXPORTA√á√ÉO DO COMPONENTE
// ========================================================================

// Exporta o componente `NotificationBell` para que ele possa ser usado em outras partes do aplicativo.
export default NotificationBell;